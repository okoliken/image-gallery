import "./chunk-NKWLXYAI.js";
import {
  Fragment,
  createElementBlock,
  createTextVNode,
  defineComponent,
  nextTick,
  onBeforeUnmount,
  onMounted,
  openBlock,
  renderList,
  renderSlot,
  watch
} from "./chunk-NWAH7BEE.js";
import {
  normalizeStyle,
  ref,
  toDisplayString,
  toRefs,
  unref
} from "./chunk-3UE4FVFR.js";
import "./chunk-RSJERJUL.js";

// node_modules/@yeger/vue-masonry-wall/dist/masonry-wall.es.mjs
var A = ["data-index"];
var F = defineComponent({
  __name: "masonry-wall",
  props: {
    columnWidth: { default: 400 },
    items: null,
    gap: { default: 0 },
    rtl: { type: Boolean, default: false },
    ssrColumns: { default: 0 }
  },
  emits: ["redraw", "redrawSkip"],
  setup(o, { emit: m }) {
    const b = o, { columnWidth: y, items: s, gap: r, rtl: g, ssrColumns: w } = toRefs(b), u = ref([]), c = ref();
    function h() {
      const e = Math.floor((c.value.getBoundingClientRect().width + r.value) / (y.value + r.value));
      return e > 0 ? e : 1;
    }
    function x(e) {
      return [...new Array(e)].map(() => []);
    }
    if (w.value > 0) {
      const e = x(w.value);
      s.value.forEach((l, a) => e[a % w.value].push(a)), u.value = e;
    }
    async function C(e) {
      if (e >= s.value.length)
        return;
      await nextTick();
      const l = [...c.value.children];
      g.value && l.reverse();
      const a = l.reduce((i, n) => n.getBoundingClientRect().height < i.getBoundingClientRect().height ? n : i);
      u.value[+a.dataset.index].push(e), await C(e + 1);
    }
    async function p(e = false) {
      if (u.value.length === h() && !e) {
        m("redrawSkip");
        return;
      }
      u.value = x(h());
      const l = window.scrollY;
      await C(0), window.scrollTo({ top: l }), m("redraw");
    }
    const t = typeof ResizeObserver > "u" ? void 0 : new ResizeObserver(() => p());
    return onMounted(() => {
      p(), t == null || t.observe(c.value);
    }), onBeforeUnmount(() => t == null ? void 0 : t.unobserve(c.value)), watch([s, g], () => p(true)), watch([y, r], () => p()), (e, l) => (openBlock(), createElementBlock("div", {
      ref_key: "wall",
      ref: c,
      class: "masonry-wall",
      style: normalizeStyle({ display: "flex", gap: `${unref(r)}px` })
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(u.value, (a, i) => (openBlock(), createElementBlock("div", {
        key: i,
        class: "masonry-column",
        "data-index": i,
        style: normalizeStyle({
          display: "flex",
          "flex-basis": "0px",
          "flex-direction": "column",
          "flex-grow": 1,
          height: ["-webkit-max-content", "-moz-max-content", "max-content"],
          gap: `${unref(r)}px`
        })
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(a, (n) => (openBlock(), createElementBlock("div", {
          key: n,
          class: "masonry-item"
        }, [
          renderSlot(e.$slots, "default", {
            item: unref(s)[n],
            index: n
          }, () => [
            createTextVNode(toDisplayString(unref(s)[n]), 1)
          ])
        ]))), 128))
      ], 12, A))), 128))
    ], 4));
  }
});
var N = (() => {
  const o = F;
  return o.install = (m) => {
    m.component("MasonryWall", o);
  }, o;
})();

// dep:@yeger_vue-masonry-wall
var yeger_vue_masonry_wall_default = N;
export {
  yeger_vue_masonry_wall_default as default
};
//# sourceMappingURL=@yeger_vue-masonry-wall.js.map
