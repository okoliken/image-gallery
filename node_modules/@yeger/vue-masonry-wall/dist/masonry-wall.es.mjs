import { defineComponent as M, toRefs as W, ref as k, onMounted as T, onBeforeUnmount as $, watch as _, openBlock as d, createElementBlock as f, normalizeStyle as B, unref as v, Fragment as R, renderList as S, renderSlot as D, createTextVNode as E, toDisplayString as Y, nextTick as z } from "vue";
const A = ["data-index"], F = /* @__PURE__ */ M({
  __name: "masonry-wall",
  props: {
    columnWidth: { default: 400 },
    items: null,
    gap: { default: 0 },
    rtl: { type: Boolean, default: !1 },
    ssrColumns: { default: 0 }
  },
  emits: ["redraw", "redrawSkip"],
  setup(o, { emit: m }) {
    const b = o, { columnWidth: y, items: s, gap: r, rtl: g, ssrColumns: w } = W(b), u = k([]), c = k();
    function h() {
      const e = Math.floor((c.value.getBoundingClientRect().width + r.value) / (y.value + r.value));
      return e > 0 ? e : 1;
    }
    function x(e) {
      return [...new Array(e)].map(() => []);
    }
    if (w.value > 0) {
      const e = x(w.value);
      s.value.forEach((l, a) => e[a % w.value].push(a)), u.value = e;
    }
    async function C(e) {
      if (e >= s.value.length)
        return;
      await z();
      const l = [...c.value.children];
      g.value && l.reverse();
      const a = l.reduce((i, n) => n.getBoundingClientRect().height < i.getBoundingClientRect().height ? n : i);
      u.value[+a.dataset.index].push(e), await C(e + 1);
    }
    async function p(e = !1) {
      if (u.value.length === h() && !e) {
        m("redrawSkip");
        return;
      }
      u.value = x(h());
      const l = window.scrollY;
      await C(0), window.scrollTo({ top: l }), m("redraw");
    }
    const t = typeof ResizeObserver > "u" ? void 0 : new ResizeObserver(() => p());
    return T(() => {
      p(), t == null || t.observe(c.value);
    }), $(() => t == null ? void 0 : t.unobserve(c.value)), _([s, g], () => p(!0)), _([y, r], () => p()), (e, l) => (d(), f("div", {
      ref_key: "wall",
      ref: c,
      class: "masonry-wall",
      style: B({ display: "flex", gap: `${v(r)}px` })
    }, [
      (d(!0), f(R, null, S(u.value, (a, i) => (d(), f("div", {
        key: i,
        class: "masonry-column",
        "data-index": i,
        style: B({
          display: "flex",
          "flex-basis": "0px",
          "flex-direction": "column",
          "flex-grow": 1,
          height: ["-webkit-max-content", "-moz-max-content", "max-content"],
          gap: `${v(r)}px`
        })
      }, [
        (d(!0), f(R, null, S(a, (n) => (d(), f("div", {
          key: n,
          class: "masonry-item"
        }, [
          D(e.$slots, "default", {
            item: v(s)[n],
            index: n
          }, () => [
            E(Y(v(s)[n]), 1)
          ])
        ]))), 128))
      ], 12, A))), 128))
    ], 4));
  }
}), N = /* @__PURE__ */ (() => {
  const o = F;
  return o.install = (m) => {
    m.component("MasonryWall", o);
  }, o;
})();
export {
  N as default
};
